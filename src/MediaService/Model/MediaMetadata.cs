using Newtonsoft.Json;

namespace MediaService
{
    public record struct MediaMetadata
    {
        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }
        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }
        [JsonProperty("author", NullValueHandling = NullValueHandling.Ignore)]
        public string Author { get; set; }

        /// <summary>
        /// Length of the media in seconds.
        /// This can only be defined manually for externally hosted media.The duration is set automatically for hosted media.
        /// </summary>
        [JsonProperty("duration", NullValueHandling = NullValueHandling.Ignore)]
        public int? Duration { get; set; }

        /// <summary>
        /// URL of the page where this media is published
        /// </summary>
        [JsonProperty("permalink", NullValueHandling = NullValueHandling.Ignore)]
        public string Permalink { get; set; }

        /// <summary>
        /// IAB category
        /// </summary>
        [JsonProperty("category", NullValueHandling = NullValueHandling.Ignore)]
        public string Category { get; set; }

        /// <summary>
        /// Start date and time in ISO 8601 format when media is available for streaming
        /// </summary>
        [JsonProperty("publish_start_date", NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? PublishStartDate { get; set; }

        /// <summary>
        /// End date and time in ISO 8601 format when media is no longer available for streaming
        /// </summary>
        [JsonProperty("publish_end_date", NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? PublishEndDate { get; set; }

        /// <summary>
        /// User-generated labels used to classify a video
        ///Tags are case insensitive and trailing whitespace is removed.
        /// </summary>
        [JsonProperty("tags", NullValueHandling = NullValueHandling.Ignore)]
        public string[] Tags { get; set; }

        /// <summary>
        /// Two-letter ISO-639-1 language code for the media
        /// This is used to index the media by language, to provide relevant playlist recommendations.
        /// </summary>
        [JsonProperty("language", NullValueHandling = NullValueHandling.Ignore)]
        public string Language { get; set; }

        /// <summary>
        /// User-generated key-value pairs
        ///When defining custom_params, include all custom parameters that should be associated with the target resource.
        ///When updating existing custom_params, include all custom_params keys with their updated values. Any custom_params key-value pair not included within the updated custom_params in the request body is deleted.
        /// </summary>
        [JsonProperty("custom_params", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, string> CustomParams { get; set; }

        /// <summary>
        /// ID for the media, generated by a non-JW Player platform or program
        /// </summary>
        [JsonProperty("external_id", NullValueHandling = NullValueHandling.Ignore)]
        public string ExternalId { get; set; }
    }
}
